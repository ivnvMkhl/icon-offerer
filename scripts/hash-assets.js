const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –¥–ª—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 */
function createFileHash(filePath) {
    const content = fs.readFileSync(filePath);
    return crypto.createHash('md5').update(content).digest('hex').substring(0, 8);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JavaScript —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
 */
function hashJavaScriptFiles() {
    const jsDir = path.join(__dirname, '../dist/js');
    const manifest = {};
    
    if (!fs.existsSync(jsDir)) {
        console.log('JS –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
        return manifest;
    }
    
    const jsFiles = fs.readdirSync(jsDir).filter(file => {
        // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–µ—à (8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏)
        return (file.endsWith('.js') || file.endsWith('.json')) && !/\.([a-f0-9]{8})\.(js|json)$/.test(file);
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JS/JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    
    jsFiles.forEach(file => {
        const originalPath = path.join(jsDir, file);
        const hash = createFileHash(originalPath);
        const extension = file.endsWith('.json') ? '.json' : '.js';
        const newFileName = file.replace(extension, `.${hash}${extension}`);
        const newPath = path.join(jsDir, newFileName);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        fs.copyFileSync(originalPath, newPath);
        
        // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(originalPath);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        manifest[file] = newFileName;
        
        console.log(`  ${file} -> ${newFileName} (—É–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª)`);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    const manifestPath = path.join(__dirname, '../dist/js-manifest.json');
    fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
    console.log(`–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${manifestPath}`);
    
    return manifest;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª—ã —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ JS —Ñ–∞–π–ª–æ–≤
 */
function updateHtmlFiles(manifest) {
    const distDir = path.join(__dirname, '../dist');
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
    function findHtmlFiles(dir) {
        const files = [];
        const items = fs.readdirSync(dir);
        
        for (const item of items) {
            const fullPath = path.join(dir, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                files.push(...findHtmlFiles(fullPath));
            } else if (item.endsWith('.html')) {
                files.push(fullPath);
            }
        }
        
        return files;
    }
    
    const htmlFiles = findHtmlFiles(distDir);
    console.log(`–û–±–Ω–æ–≤–ª—è–µ–º ${htmlFiles.length} HTML —Ñ–∞–π–ª–æ–≤:`);
    
    htmlFiles.forEach(filePath => {
        let content = fs.readFileSync(filePath, 'utf8');
        let updated = false;
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ JS —Ñ–∞–π–ª—ã
        Object.entries(manifest).forEach(([original, hashed]) => {
            // –ó–∞–º–µ–Ω—è–µ–º src –∞—Ç—Ä–∏–±—É—Ç—ã
            const srcRegex = new RegExp(`src="[^"]*${original}"`, 'g');
            const newSrcContent = content.replace(srcRegex, `src="/icon-refferer/js/${hashed}"`);
            if (newSrcContent !== content) {
                content = newSrcContent;
                updated = true;
            }
            
            // –ó–∞–º–µ–Ω—è–µ–º jsFile –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            const jsFileRegex = new RegExp(`jsFile: 'js/${original}'`, 'g');
            const newJsFileContent = content.replace(jsFileRegex, `jsFile: 'js/${hashed}'`);
            if (newJsFileContent !== content) {
                content = newJsFileContent;
                updated = true;
            }
            
            // –ó–∞–º–µ–Ω—è–µ–º dataFile –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è JSON —Ñ–∞–π–ª–æ–≤
            if (original.endsWith('.json')) {
                const dataFileRegex = new RegExp(`dataFile: '${original}'`, 'g');
                const newDataFileContent = content.replace(dataFileRegex, `dataFile: '${hashed}'`);
                if (newDataFileContent !== content) {
                    content = newDataFileContent;
                    updated = true;
                }
            }
        });
        
        if (updated) {
            fs.writeFileSync(filePath, content);
            const relativePath = path.relative(distDir, filePath);
            console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω: ${relativePath}`);
        }
    });
}

/**
 * –£–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ JS —Ñ–∞–π–ª—ã –±–µ–∑ —Ö–µ—à–µ–π
 */
function cleanupOriginalFiles() {
    const jsDir = path.join(__dirname, '../dist/js');
    
    if (!fs.existsSync(jsDir)) {
        console.log('JS –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
        return;
    }
    
    const allFiles = fs.readdirSync(jsDir);
    const jsFiles = allFiles.filter(file => file.endsWith('.js') || file.endsWith('.json'));
    
    console.log('–û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ —Ö–µ—à–µ–π:');
    
    jsFiles.forEach(file => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ—à (8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏)
        const hasHash = /\.([a-f0-9]{8})\.(js|json)$/.test(file);
        
        if (!hasHash) {
            const filePath = path.join(jsDir, file);
            fs.unlinkSync(filePath);
            console.log(`  –£–¥–∞–ª–µ–Ω: ${file}`);
        }
    });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç .htaccess —Ñ–∞–π–ª –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function createHtaccess() {
    const htaccessContent = `# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è JavaScript —Ñ–∞–π–ª–æ–≤ —Å —Ö–µ—à–∞–º–∏
<FilesMatch "\\.(js)$">
    # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å —Ö–µ—à–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç 8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏)
    <If "%{REQUEST_URI} =~ m/\\.[a-f0-9]{8}\\.js$/">
        Header set Cache-Control "public, max-age=31536000, immutable"
        Header set Expires "Thu, 31 Dec 2037 23:55:55 GMT"
    </If>
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö JS —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ö–µ—à–µ–π)
    <Else>
        Header set Cache-Control "public, max-age=86400"
        Header set Expires "Thu, 31 Dec 2037 23:55:55 GMT"
    </Else>
</FilesMatch>

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
<FilesMatch "\\.(css)$">
    Header set Cache-Control "public, max-age=86400"
    Header set Expires "Thu, 31 Dec 2037 23:55:55 GMT"
</FilesMatch>

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
<FilesMatch "\\.(ico|png|jpg|jpeg|gif|svg|webp)$">
    Header set Cache-Control "public, max-age=31536000"
    Header set Expires "Thu, 31 Dec 2037 23:55:55 GMT"
</FilesMatch>

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤
<FilesMatch "\\.(woff|woff2|ttf|eot)$">
    Header set Cache-Control "public, max-age=31536000"
    Header set Expires "Thu, 31 Dec 2037 23:55:55 GMT"
</FilesMatch>
`;
    
    const htaccessPath = path.join(__dirname, '../dist/.htaccess');
    fs.writeFileSync(htaccessPath, htaccessContent);
    console.log('–°–æ–∑–¥–∞–Ω .htaccess —Ñ–∞–π–ª –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    if (process.env.ELEVENTY_ENV !== 'production') {
        console.log('‚ö†Ô∏è  –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        return;
    }
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ JavaScript —Ñ–∞–π–ª–æ–≤...');
    
    try {
        const manifest = hashJavaScriptFiles();
        
        if (Object.keys(manifest).length > 0) {
            updateHtmlFiles(manifest);
            cleanupOriginalFiles();
            createHtaccess();
            console.log('‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ö†Ô∏è  JS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { hashJavaScriptFiles, updateHtmlFiles, createHtaccess };
